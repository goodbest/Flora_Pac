#!/usr/bin/env python
# Flora_Pac by @leaskh
# www.leaskh.com, i@leaskh.com
# Based on chnroutes project (by Numb.Majority@gmail.com)

import re
import urllib2
import argparse
import math
import socket
import struct
import json

class RouteChain(object):
    def __init__(self):
        self.list = []
        self.flag = True
        self.insert('0.0.0.0/8')
        self.insert('10.0.0.0/8')
        self.insert('127.0.0.0/8')
        self.insert('169.254.0.0/16')
        self.insert('172.16.0.0/12')
        self.insert('192.0.0.0/24')
        self.insert('192.0.2.0/24')
        self.insert('192.88.99.0/24')
        self.insert('192.168.0.0/16')
        self.insert('198.18.0.0/15')
        self.insert('198.51.100.0/24')
        self.insert('203.0.113.0/24')
        self.insert('224.0.0.0/4')
        self.insert('240.0.0.0/4')

    def __str__(self):
        self.reduce()
        line = []
        for (addr, mask) in self.list:
            line.append('{}.{}.{}.{}/{}'.format(
                (addr >> 24) % 256,
                (addr >> 16) % 256,
                (addr >>  8) % 256,
                (addr >>  0) % 256,
                (33 - mask.bit_length())))
        return '\n'.join(line)

    def __iter__(self):
        self.reduce()
        return iter(self.list)

    def insert(self, ipnet):
        self.flag = False
        addr, mask = ipnet.split('/')
        bits = addr.split('.')
        addr = 0
        for byte in bits:
            addr = (addr << 8) + int(byte)
        if '.' in mask:
            mask = sum([bin(int(x)).count('1') for x in mask.split('.')])
        mask = 1 << 32 - int(mask)
        self.list.append((addr, mask))

    def reduce(self):
        if self.flag:
            return
        self.list.sort(key=lambda x: x[0])
        head = -1
        rule = []
        for (addr, mask) in self.list:
            flag = addr + mask
            if head >= flag:
                continue
            if head >= addr:
                addr, _ = rule.pop()
                mask = flag - addr
            head = flag
            rule.append((addr, mask))
        self.list = []
        for (addr, mask) in rule:
            while mask > 0:
                head = 1 << mask.bit_length() - 1
                if addr + head >> 24 != addr >> 24:
                    head = (((addr >> 24) + 1) << 24) - addr
                self.list.append((addr, head))
                mask = mask - head
                addr = addr + head
        self.flag = True



def generate_pac(proxy, pacfile='flora_pac.pac', apnicfile=''):
    route = RouteChain()
    results  = fetch_ip_data(apnicfile)
    for line in results:
        route.insert(line)

    codelist = [[] for _ in range(256)]
    masklist = [[] for _ in range(256)]

    for (addr, mask) in route:
        atom = addr >> 24
        codelist[atom].append(addr >> 8 & 0x00FFFF)
        masklist[atom].append(mask.bit_length() - 9)

    codelist = json.dumps(codelist, separators=(',', ':')).replace('[]', '0')
    masklist = json.dumps(masklist, separators=(',', ':')).replace('[]', '0')

    strLines = """
// Flora_Pac by @leaskh
// www.leaskh.com, i@leaskh.com
// mod by @goodbest

var proxy = __proxy__;

var dangerDomains = {
    'phobos.apple.com' : 1,
    'bit.ly' : 1,
    'dropbox.com' : 1,
    'dropboxstatic.com' : 1,
    'dropboxusercontent.com' : 1,
    'facebook.com' : 1,
    'fastly.net' : 1,
    'fbcdn.net' : 1,
    'github.com' : 1,
    'gravatar.com' : 1,
    'google.co.jp' : 1,
    'google.com' : 1,
    'google.com.hk' : 1,
    'googleusercontent.com' : 1,
    'gstatic.com' : 1,
    'imgur.com' : 1,
    'j.mp' : 1,
    't.co' : 1,
    'twimg.com' : 1,
    'twitter.com' : 1,
    'v2ex.com' : 1,
    'wikipedia.org' : 1,
    'wikimedia.org' : 1,
    'ytimg.com' : 1,
    'youtube.com' : 1,
};

var safeDomains = {
    '10010.com' : 1,
    '115.com' : 1,
    '126.com' : 1,
    '126.net' : 1,
    '163.com' : 1,
    '17173.com' : 1,
    '178.com' : 1,
    '21cn.com' : 1,
    '360buy.com' : 1,
    '360buyimg.com' : 1,
    '360doc.com' : 1,
    '36kr.com' : 1,
    '51.la' : 1,
    '51buy.com' : 1,
    '51cto.com' : 1,
    '51job.com' : 1,
    '51jobcdn.com' : 1,
    '5d6d.com' : 1,
    '5d6d.net' : 1,
    '6rooms.com' : 1,
    '91.com' : 1,
    'acfun.tv' : 1,
    'acgvideo.com' : 1,
    'aicdn.com' : 1,
    'ali213.net' : 1,
    'alibaba.com' : 1,
    'alicdn.com' : 1,
    'aliexpress.com' : 1,
    'aliimg.com' : 1,
    'alikunlun.com' : 1,
    'alimama.com' : 1,
    'alipay.com' : 1,
    'alipayobjects.com' : 1,
    'alisoft.com' : 1,
    'aliyun.com' : 1,
    'aliyuncdn.com' : 1,
    'aliyuncs.com' : 1,
    'anzhi.com' : 1,
    'apple.com' : 1,
    'appsina.com' : 1,
    'baidu.com' : 1,
    'baidupcs.com' : 1,
    'baidustatic.com' : 1,
    'baixing.com' : 1,
    'bdimg.com' : 1,
    'bdstatic.com' : 1,
    'bilibili.tv' : 1,
    'bilibili.com' : 1,
    'ccb.com' : 1,
    'cctv.com' : 1,
    'cctvpic.com' : 1,
    'cdn20.com' : 1,
    'china.com' : 1,
    'chinabyte.com' : 1,
    'chinacache.com' : 1,
    'chinacache.net' : 1,
    'chinahr.com' : 1,
    'chinamobile.com' : 1,
    'chinanetcenter.com' : 1,
    'chinanews.com' : 1,
    'chinaz.com' : 1,
    'chiphell.com' : 1,
    'chuangxin.com' : 1,
    'cloudcdn.net' : 1,
    'cmbchina.com' : 1,
    'cn' : 1,
    'cnbeta.com' : 1,
    'cnbetacdn.com' : 1,
    'cnblogs.com' : 1,
    'cnepub.com' : 1,
    'cnzz.com' : 1,
    'comsenz.com' : 1,
    'csdn.net' : 1,
    'ct10000.com' : 1,
    'dangdang.com' : 1,
    'dbank.com' : 1,
    'dianping.com' : 1,
    'discuz.com' : 1,
    'discuz.net' : 1,
    'docin.com' : 1,
    'donews.com' : 1,
    'douban.com' : 1,
    'douban.fm' : 1,
    'duomi.com' : 1,
    'duote.com' : 1,
    'duowan.com' : 1,
    'etao.com' : 1,
    'ele.me' : 1,
    'elemecdn.com' : 1,
    'feng.com' : 1,
    'ganji.com' : 1,
    'gaopeng.com' : 1,
    'geekpark.net' : 1,
    'gfan.com' : 1,
    'hacdn.net' : 1,
    'hadns.net' : 1,
    'hao123.com' : 1,
    'hao123img.com' : 1,
    'hexun.com' : 1,
    'huanqiu.com' : 1,
    'hudong.com' : 1,
    'hupu.com' : 1,
    'iask.com' : 1,
    'iapps.im' : 1,
    'iciba.com' : 1,
    'icloud.com' : 1,
    'idqqimg.com' : 1,
    'ifanr.com' : 1,
    'ifeng.com' : 1,
    'ifengimg.com' : 1,
    'ijinshan.com' : 1,
    'iqiyi.com' : 1,
    'it168.com' : 1,
    'jandan.net' : 1,
    'jd.com' : 1,
    'jumei.com' : 1,
    'kaixin001.com' : 1,
    'kanimg.com' : 1,
    'kankanews.com' : 1,
    'kdnet.net' : 1,
    'ku6.com' : 1,
    'ku6cdn.com' : 1,
    'ku6img.com' : 1,
    'kuaidi100.com' : 1,
    'kugou.com' : 1,
    'lashou.com' : 1,
    'letv.com' : 1,
    'lietou.com' : 1,
    'mapbar.com' : 1,
    'me.com' : 1,
    'meilishuo.com' : 1,
    'meituan.com' : 1,
    'meituan.net' : 1,
    'meizu.com' : 1,
    'mi.com' : 1,
    'miui.com' : 1,
    'mop.com' : 1,
    'mtime.com' : 1,
    'mydrivers.com' : 1,
    'netease.com' : 1,
    'nuomi.com' : 1,
    'oldcat.me' : 1,
    'paipai.com' : 1,
    'pcbeta.com' : 1,
    'pchome.net' : 1,
    'pcpop.com' : 1,
    'pengyou.com' : 1,
    'phpwind.net' : 1,
    'pingan.com' : 1,
    'pplive.com' : 1,
    'pps.tv' : 1,
    'ppstream.com' : 1,
    'pptv.com' : 1,
    'qhimg.com' : 1,
    'qidian.com' : 1,
    'qiniu.com' : 1,
    'qiniudn.com' : 1,
    'qiyi.com' : 1,
    'qiyipic.com' : 1,
    'qq.com' : 1,
    'qqmail.com' : 1,
    'qstatic.com' : 1,
    'qunar.com' : 1,
    'qunarzz.com' : 1,
    'renren.com' : 1,
    'renrendai.com' : 1,
    'rrfmn.com' : 1,
    'rrimg.com' : 1,
    'sdo.com' : 1,
    'sina.com' : 1,
    'sinaapp.com' : 1,
    'sinaedge.com' : 1,
    'sinaimg.com' : 1,
    'sinajs.com' : 1,
    'skycn.com' : 1,
    'smzdm.com' : 1,
    'sogou.com' : 1,
    'sohu.com' : 1,
    'soku.com' : 1,
    'soso.com' : 1,
    'soufun.com' : 1,
    'soufunimg.com' : 1,
    'speedtest.net' : 1,
    'suning.com' : 1,
    'taobao.com' : 1,
    'taobaocdn.com' : 1,
    'tbcache.com' : 1,
    'tdimg.com' : 1,
    'tencent.com' : 1,
    'tenpay.com' : 1,
    'tiebaimg.com' : 1,
    'tiexue.net' : 1,
    'tmall.com' : 1,
    'tmcdn.net' : 1,
    'tom.com' : 1,
    'tudou.com' : 1,
    'tudouui.com' : 1,
    'tuniu.com' : 1,
    'u17.com' : 1,
    'ucjoy.com' : 1,
    'unionpay.com' : 1,
    'unionpaysecure.com' : 1,
    'upaiyun.com' : 1,
    'upyun.com' : 1,
    'uusee.com' : 1,
    'uuu9.com' : 1,
    'vancl.com' : 1,
    'vcimg.com' : 1,
    'verycd.com' : 1,
    'wandoujia.com' : 1,
    'wdjimg.com' : 1,
    'weibo.com' : 1,
    'weiphone.com' : 1,
    'weiyun.com' : 1,
    'xiachufang.com' : 1,
    'xiami.com' : 1,
    'xiami.net' : 1,
    'xiaomi.com' : 1,
    'xiaonei.com' : 1,
    'xinhuanet.com' : 1,
    'xinnet.com' : 1,
    'xn--fiqs8s' : 1,
    'xnpic.com' : 1,
    'xunlei.com' : 1,
    'ydstatic.com' : 1,
    'yesky.com' : 1,
    'yhd.com' : 1,
    'yihaodian.com' : 1,
    'yihaodianimg.com' : 1,
    'yingjiesheng.com' : 1,
    'yinyuetai.com' : 1,
    'yixun.com' : 1,
    'ykimg.com' : 1,
    'youdao.com' : 1,
    'yougou.com' : 1,
    'youku.com' : 1,
    'yupoo.com' : 1,
    'yy.com' : 1,
    'zbjimg.com' : 1,
    'zhaopin.com' : 1,
    'zhi.hu' : 1,
    'zhihu.com' : 1,
    'zhimg.com' : 1,
};

var codeList = __codeList__;
var maskList = __maskList__;

function match(IP, codeList, maskList) {
	var atom = IP.split(".");
    var code = ((atom[1] & 0xff) << 8) | ((atom[2] & 0xff));
    var hash = atom[0];

    var codeHash = codeList[hash];
    var maskHash = maskList[hash];

    if (codeHash === 0) {
        return false;
    }

    var min = 0;
    var max = codeHash.length;

    while (min + 1 < max) {
        var mid = (min + max) >> 1;
        codeHash[mid] > code ? max = mid : min = mid;
    }

    if (code - codeHash[min] >> maskHash[min] === 0) {
        return true;
    }
    return false;
}

function FindProxyForURL(url, host) {
    if (isPlainHostName(host)
     || host === '127.0.0.1'
     || host === 'localhost') {
        return 'DIRECT';
    }

    var suffix = host;
    var pos = 0;

    do {
        if (safeDomains.hasOwnProperty(suffix)) {
            return 'DIRECT';
        }
        if (dangerDomains.hasOwnProperty(suffix)) {
            return proxy;
        }
        pos = host.indexOf(".", pos) + 1;
        suffix = host.substring(pos);
    } while (pos > 0);

    var IP = dnsResolve(host);
    if (!IP) {
        return proxy;
    }

    if (match(IP, codeList, maskList)) {
        return 'DIRECT';
    }

    return proxy;
}
"""
    strLines=strLines.replace('__codeList__', codelist)
    strLines=strLines.replace('__maskList__', masklist)
    strLines=strLines.replace('__proxy__', proxy)
    
    rfile = open(pacfile, 'w')
    rfile.write(strLines)
    rfile.close()
    print ("Pac File Generated.\n"
           "Usage: Use the newly created %s as your web browser's automatic "
           "PAC(Proxy auto-config) file."%(pacfile))


def pac_server(port, pacfile='flora_pac.pac'):
    if port <= 0:
        return
    import SimpleHTTPServer
    import BaseHTTPServer
    class DefaultHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/':
                self.path = '/'+pacfile
            return SimpleHTTPServer.SimpleHTTPRequestHandler.do_GET(self)
    httpd = BaseHTTPServer.HTTPServer(('0.0.0.0', port), DefaultHandler)
    print "PAC is now serving at: 0.0.0.0:%d"%(port)
    print "Check it out with: $ curl http://127.0.0.1:%d"%(port)
    httpd.serve_forever()


def fetch_ip_data(apnicfile=''):
    #fetch data from apnic
    print "Fetching data from apnic.net, it might take a few minutes, please wait..."
    if apnicfile == '':
        url=r'http://ftp.apnic.net/apnic/stats/apnic/delegated-apnic-latest'
    else:
        url=apnicfile
    data=urllib2.urlopen(url).read()

    cnregex=re.compile(r'apnic\|cn\|ipv4\|[0-9\.]+\|[0-9]+\|[0-9]+\|a.*',re.IGNORECASE)
    cndata=cnregex.findall(data)

    results=[]

    for item in cndata:
        unit_items=item.split('|')
        starting_ip=unit_items[3]
        cidr=32-int(math.log(int(unit_items[4]),2))
        results.append(str(starting_ip)+'/'+str(cidr));
    return results


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate proxy auto-config rules.")
    parser.add_argument('-x', '--proxy',
                        dest    = 'proxy',
                        default = 'SOCKS5 127.0.0.1:1080; SOCKS 127.0.0.1:1080; DIRECT',
                        nargs   = '?',
                        help    = "Proxy Server, examples: "
                                  "SOCKS5 127.0.0.1:1080; "
                                  "SOCKS 127.0.0.1:1080; "
                                  "PROXY 127.0.0.1:6489")
    parser.add_argument('-p', '--port',
                        dest    = 'port',
                        default = '0',
                        nargs   = '?',
                        help    = "Pac Server Port [OPTIONAL], examples: 8970")
    parser.add_argument('-f', '--pacfile',
                        dest    = 'pacfile',
                        default = 'flora_pac.pac',
                        nargs   = '?',
                        help    = "Pac File Name [OPTIONAL], examples: flora_pac.pac")
    parser.add_argument('-a', '--apnicfile',
                        dest    = 'apnicfile',
                        default = '',
                        nargs   = '?',
                        help    = "APNIC File URL [OPTIONAL], examples: http://exmaple.com/apnic or file:///etc/apnic.txt")
    args = parser.parse_args()
    generate_pac(args.proxy, args.pacfile, args.apnicfile)
    pac_server(int(args.port), args.pacfile)